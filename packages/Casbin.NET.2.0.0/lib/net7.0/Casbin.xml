<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Casbin</name>
    </assembly>
    <members>
        <member name="M:Casbin.Config.DefaultConfig.Create">
            <summary>
            Creates an empty default configuration representation.
            </summary>
            <returns>The constructor of Config.</returns>
        </member>
        <member name="M:Casbin.Config.DefaultConfig.CreateFromFile(System.String)">
            <summary>
            Creates an empty default configuration representation from file.
            </summary>
            <param name="configFilePath">The path of the model file.</param>
            <returns>The constructor of Config.</returns>
        </member>
        <member name="M:Casbin.Config.DefaultConfig.CreateFromText(System.String)">
            <summary>
            Creates an empty default configuration representation from text.
            </summary>
            <param name="text">The model text.</param>
            <returns>The constructor of Config.</returns>
        </member>
        <member name="M:Casbin.Config.DefaultConfig.AddConfig(System.String,System.String,System.String)">
            <summary>
            Adds a new section->key:value to the configuration.
            </summary>
            <param name="section"></param>
            <param name="option"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Casbin.Effect.IEffector">
            <summary>
            Effector is the interface for Casbin effectors.
            </summary>
        </member>
        <member name="M:Casbin.Effect.IEffector.MergeEffects(System.String,System.Collections.Generic.IReadOnlyList{Casbin.Effect.PolicyEffect},System.Collections.Generic.IReadOnlyList{System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Merges all matching results collected by the enforcer into a single decision.
            </summary>
            <param name="effectExpression">The expression of [policy_effect].</param>
            <param name="effects">The effects of all matched rules.</param>
            <param name="results">The matcher results of all matched rules.</param>
            <param name="policyCount"></param>
            <param name="hitPolicyIndex"></param>
            <param name="policyIndex"></param>
            <returns>The final effect.</returns>
        </member>
        <member name="T:Casbin.Effect.DefaultEffector">
            <summary>
            DefaultEffector is default effector for Casbin.
            </summary>
        </member>
        <member name="M:Casbin.Effect.DefaultEffector.MergeEffects(System.String,System.Collections.Generic.IReadOnlyList{Casbin.Effect.PolicyEffect},System.Collections.Generic.IReadOnlyList{System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Merges all matching results collected by the enforcer into a single decision.
            </summary>
            <param name="effectExpression"></param>
            <param name="effects"></param>
            <param name="matches"></param>
            <param name="policyIndex"></param>
            <param name="policyCount"></param>
            <param name="hitPolicyIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Effect.DefaultEffector.MergeEffects(Casbin.Effect.EffectExpressionType,System.Collections.Generic.IReadOnlyList{Casbin.Effect.PolicyEffect},System.Collections.Generic.IReadOnlyList{System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            Merges all matching results collected by the enforcer into a single decision.
            </summary>
            <param name="effectExpressionType"></param>
            <param name="effects"></param>
            <param name="matches"></param>
            <param name="policyCount"></param>
            <param name="hitPolicyIndex"></param>
            <param name="policyIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Casbin.IEnforcer">
            <summary>
            IEnforcer is the API interface of Enforcer
            </summary>
        </member>
        <member name="M:Casbin.IEnforcer.Enforce``1(Casbin.EnforceContext,``0)">
            <summary>
                Decides whether a "subject" can access a "object" with the operation
                "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context"></param>
            <param name="requestValues">
                The request needs to be mediated, usually an array of strings,
                can be class instances if ABAC is used.
            </param>
            <returns>Whether to allow the request.</returns>
        </member>
        <member name="M:Casbin.IEnforcer.EnforceAsync``1(Casbin.EnforceContext,``0)">
            <summary>
                Decides whether a "subject" can access a "object" with the operation
                "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context"></param>
            <param name="requestValues">
                The request needs to be mediated, usually an array of strings,
                can be class instances if ABAC is used.
            </param>
            <returns>Whether to allow the request.</returns>
        </member>
        <member name="M:Casbin.IEnforcer.BatchEnforce``1(Casbin.EnforceContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Decides whether some "subject" can access corresponding "object" with the operation
                "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context">Enforce context include all status on enforcing</param>
            <param name="requestValues">
                The requests needs to be mediated, whose element is usually an array of strings
                but can be class instances if ABAC is used.
            </param>
            <returns>Whether to allow the requests.</returns>
        </member>
        <member name="M:Casbin.IEnforcer.BatchEnforceAsync``1(Casbin.EnforceContext,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Decides whether some "subject" can access corresponding "object" with the operation
                "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context">Enforce context include all status on enforcing</param>
            <param name="requestValues">
                The requests needs to be mediated, whose element is usually an array of strings
                but can be class instances if ABAC is used.
            </param>
            <returns>Whether to allow the requests.</returns>
        </member>
        <member name="M:Casbin.Model.ModelExtension.BuildRoleLinks(Casbin.Model.IModel,System.String)">
            <summary>
                Initializes the roles in RBAC.
            </summary>
        </member>
        <member name="M:Casbin.Model.ModelExtension.BuildIncrementalRoleLink(Casbin.Model.IModel,Casbin.PolicyOperation,System.String,Casbin.Model.IPolicyValues)">
            <summary>
                Provides incremental build the role inheritance relation.
            </summary>
            <param name="model"></param>
            <param name="policyOperation"></param>
            <param name="roleType"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Casbin.Model.ModelExtension.BuildIncrementalRoleLink(Casbin.Model.IModel,Casbin.PolicyOperation,System.String,Casbin.Model.IPolicyValues,Casbin.Model.IPolicyValues)">
            <summary>
                Provides incremental build the role inheritance relation.
            </summary>
            <param name="model"></param>
            <param name="policyOperation"></param>
            <param name="roleType"></param>
            <param name="oldRule"></param>
            <param name="newRule"></param>
        </member>
        <member name="M:Casbin.Model.ModelExtension.BuildIncrementalRoleLinks(Casbin.Model.IModel,Casbin.PolicyOperation,System.String,System.Collections.Generic.IEnumerable{Casbin.Model.IPolicyValues})">
            <summary>
                Provides incremental build the role inheritance relations.
            </summary>
            <param name="model"></param>
            <param name="policyOperation"></param>
            <param name="roleType"></param>
            <param name="rules"></param>
        </member>
        <member name="M:Casbin.Model.ModelExtension.BuildIncrementalRoleLinks(Casbin.Model.IModel,Casbin.PolicyOperation,System.String,System.Collections.Generic.IEnumerable{Casbin.Model.IPolicyValues},System.Collections.Generic.IEnumerable{Casbin.Model.IPolicyValues})">
            <summary>
                Provides incremental build the role inheritance relations.
            </summary>
            <param name="model"></param>
            <param name="policyOperation"></param>
            <param name="roleType"></param>
            <param name="oldRules"></param>
            <param name="newRules"></param>
        </member>
        <member name="T:Casbin.Model.Assertion">
            <summary>
            Represents an expression in a section of the model.
            For example: r = sub, obj, act
            </summary>
        </member>
        <member name="M:Casbin.Model.DefaultModel.Create">
            <summary>
                Creates a default model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Casbin.Model.DefaultModel.CreateFromFile(System.String)">
            <summary>
                Creates a default model from file.
            </summary>
            <param name="path">The path of the model file.</param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Model.DefaultModel.CreateFromText(System.String)">
            <summary>
            Creates a default model from text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Model.DefaultModel.NewModelFromFile(System.String)">
            <summary>
                Creates a default model from file. (go like API)
            </summary>
            <param name="path">The path of the model file.</param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Model.DefaultModel.NewModelFromText(System.String)">
            <summary>
                Creates a default model from text. (go like API)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Casbin.Persist.IWatcherEx">
            <summary>
                WatcherEx is the strengthened Casbin watchers.
                It is used to be compatible with the Golang Casbin version,
                It is not necessary to use it in C# because the IIncrementalWatcher exists.
            </summary>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForAddPolicy(System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForAddPolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.AddPolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForAddPolicyAsync(System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForAddPolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.AddPolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemovePolicy(System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForRemovePolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemovePolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemovePolicyAsync(System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForRemovePolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemovePolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemoveFilteredPolicy(System.String,System.String,System.Int32,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForRemoveFilteredPolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="fieldIndex"></param>
            <param name="fieldValues"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemoveFilteredPolicyAsync(System.String,System.String,System.Int32,Casbin.Model.IPolicyValues)">
            <summary>
                UpdateForRemoveFilteredPolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="fieldIndex"></param>
            <param name="fieldValues"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForSavePolicy">
            <summary>
                UpdateForSavePolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()
            </summary>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForSavePolicyAsync">
            <summary>
                UpdateForSavePolicy calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemoveFilteredNamedGroupingPolicy()
            </summary>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForAddPolicies(System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                UpdateForAddPolicies calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.AddPolicies()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForAddPoliciesAsync(System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                UpdateForAddPolicies calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.AddPolicies()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemovePolicies(System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                UpdateForRemovePolicies calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemovePolicies()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Casbin.Persist.IWatcherEx.UpdateForRemovePoliciesAsync(System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                UpdateForRemovePolicies calls the update callback of other instances to synchronize their policy.
                It is called after Enforcer.RemovePolicies()
            </summary>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
        </member>
        <member name="P:Casbin.Rbac.IRoleManager.MatchingFunc">
            <summary>
            Supports use pattern in g.
            </summary>
        </member>
        <member name="P:Casbin.Rbac.IRoleManager.DomainMatchingFunc">
            <summary>
            Supports use domain pattern in g.
            </summary>
        </member>
        <member name="P:Casbin.Rbac.IRoleManager.HasPattern">
            <summary>
            Whether MatchingFunc is set.
            </summary>
        </member>
        <member name="P:Casbin.Rbac.IRoleManager.HasDomainPattern">
            <summary>
            Whether DomainMatchingFunc is set.
            </summary>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.GetRoles(System.String,System.String)">
            <summary>
            Gets the roles that a user inherits. domain is a prefix to the roles.
            </summary>
            <param name="name"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.GetUsers(System.String,System.String)">
            <summary>
            Gets the users that inherits a role.
            domain is a prefix to the users (can be used for other purposes).
            </summary>
            <param name="name"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.GetDomains(System.String)">
            <summary>
            Gets the domains that a user has.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.HasLink(System.String,System.String,System.String)">
            <summary>
            Determines whether a link exists between two roles. role: name1
            inherits role: name2. domain is a prefix to the roles.
            </summary>
            <param name="name1">The first role (or a user).</param>
            <param name="name2">The second role.</param>
            <param name="domain">The domain the roles belong to.</param>
            <returns>Whether name1 inherits name2 (name1 has role name2).</returns>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.AddLink(System.String,System.String,System.String)">
            <summary>
            Adds the inheritance link between two roles. role: name1 and role:
            name2. domain is a prefix to the roles.
            </summary>
            <param name="name1">The first role (or user).</param>
            <param name="name2">The second role.</param>
            <param name="domain">The domain the roles belong to.</param>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.DeleteLink(System.String,System.String,System.String)">
            <summary>
            Deletes the inheritance link between two roles. role: name1 and
            role: name2. domain is a prefix to the roles.
            </summary>
            <param name="name1">The first role (or user).</param>
            <param name="name2">The second role.</param>
            <param name="domain">The domain the roles belong to.</param>
        </member>
        <member name="M:Casbin.Rbac.IRoleManager.Clear">
            <summary>
            Clears all stored data and resets the role manager to the initial state.
            </summary>
        </member>
        <member name="T:Casbin.Rbac.GroupRoleManager">
            <summary>
            GroupRoleManager is used for authorization if the user's group is the role who has permission,
            but the group information is in the default format(policy start with "g") and the role information
            is in named format(policy start with "g2", "g3", ...).
            e.g.
            p, admin, domain1, data1, read
            g, alice, group1
            g2, group1, admin, domain1
            As for the previous example, alice should have the permission to read data1, but if we use the
            DefaultRoleManager, it will return false.
            GroupRoleManager is to handle this situation.
            </summary>
        </member>
        <member name="M:Casbin.Rbac.GroupRoleManager.#ctor(System.Int32)">
            <summary>
            GroupRoleManager is the constructor for creating an instance of the 
            GroupRoleManager implementation.
            </summary>
            <param name="maxHierarchyLevel">The maximized allowed RBAC hierarchy level.</param>
        </member>
        <member name="M:Casbin.Rbac.GroupRoleManager.HasLink(System.String,System.String,System.String)">
            <summary>
            Determines whether role: name1 inherits role: name2. 
            domain is a prefix to the roles.
            </summary>
            <param name="name1"></param>
            <param name="name2"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="T:Casbin.Rbac.Role">
            <summary>
            Role represents the data structure for a role in RBAC.
            </summary>
        </member>
        <member name="M:Casbin.Enforcer.Enforce``1(Casbin.EnforceContext,``0)">
            <summary>
            Decides whether a "subject" can access a "object" with the operation
            "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context">Enforce context include all status on enforcing</param>
            <param name="requestValues">The request needs to be mediated, usually an array of strings,
            can be class instances if ABAC is used.</param>
            <returns>Whether to allow the request.</returns>
        </member>
        <member name="M:Casbin.Enforcer.EnforceAsync``1(Casbin.EnforceContext,``0)">
            <summary>
            Decides whether a "subject" can access a "object" with the operation
            "action", input parameters are usually: (sub, obj, act).
            </summary>
            <param name="context">Enforce context</param>
            <param name="requestValues">The request needs to be mediated, usually an array of strings,
            can be class instances if ABAC is used.</param>
            <returns>Whether to allow the request.</returns>
        </member>
        <member name="M:Casbin.EnforcerExtension.LoadModel(Casbin.IEnforcer)">
            <summary>
                LoadModel reloads the model from the model CONF file. Because the policy is
                Attached to a model, so the policy is invalidated and needs to be reloaded by
                calling LoadPolicy().
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.EnableEnforce(Casbin.IEnforcer,System.Boolean)">
            <summary>
            Changes the enforcing state of Casbin, when Casbin is disabled,
            all access will be allowed by the enforce() function.
            </summary>
            <param name="enforcer"></param>
            <param name="enable"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.EnableAutoSave(Casbin.IEnforcer,System.Boolean)">
            <summary>
            Controls whether to save a policy rule automatically to the
            adapter when it is added or removed.
            </summary>
            <param name="enforcer"></param>
            <param name="autoSave"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.EnableAutoBuildRoleLinks(Casbin.IEnforcer,System.Boolean)">
            <summary>
            Controls whether to save a policy rule automatically
            to the adapter when it is added or removed.
            </summary>
            <param name="enforcer"></param>
            <param name="autoBuildRoleLinks">Whether to automatically build the role links.</param>
        </member>
        <member name="M:Casbin.EnforcerExtension.EnableAutoNotifyWatcher(Casbin.IEnforcer,System.Boolean)">
            <summary>
            Controls whether to save a policy rule automatically
            notify the Watcher when it is added or removed.
            </summary>
            <param name="enforcer"></param>
            <param name="autoNotifyWatcher">Whether to automatically notify watcher.</param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetEffector(Casbin.IEnforcer,Casbin.Effect.IEffector)">
            <summary>
            Sets the current effector.
            </summary>
            <param name="enforcer"></param>
            <param name="effector"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetModel(Casbin.IEnforcer,System.String)">
            <summary>
            Sets the current model.
            </summary>
            <param name="enforcer"></param>
            <param name="modelPath"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetModel(Casbin.IEnforcer,Casbin.Model.IModel)">
            <summary>
            Sets the current model.
            </summary>
            <param name="enforcer"></param>
            <param name="model"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetAdapter(Casbin.IEnforcer,Casbin.Persist.IReadOnlyAdapter)">
            <summary>
            Sets an adapter.
            </summary>
            <param name="enforcer"></param>
            <param name="adapter"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetWatcher(Casbin.IEnforcer,Casbin.Persist.IWatcher)">
            <summary>
            Sets an watcher.
            </summary>
            <param name="enforcer"></param>
            <param name="watcher"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.SetEnforceCache(Casbin.IEnforcer,Casbin.Caching.IEnforceCache)">
            <summary>
            Sets an enforce cache.
            </summary>
            <param name="enforcer"></param>
            <param name="enforceCache"></param>
        </member>
        <member name="M:Casbin.EnforcerExtension.LoadPolicy(Casbin.IEnforcer)">
            <summary>
            Reloads the policy from file/database.
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.LoadPolicyAsync(Casbin.IEnforcer)">
            <summary>
            Reloads the policy from file/database.
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.LoadFilteredPolicy(Casbin.IEnforcer,Casbin.Persist.IPolicyFilter)">
            <summary>
            Reloads a filtered policy from file/database.
            </summary>
            <param name="enforcer"></param>
            <param name="filter">The filter used to specify which type of policy should be loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Casbin.EnforcerExtension.LoadFilteredPolicyAsync(Casbin.IEnforcer,Casbin.Persist.Filter)">
            <summary>
            Reloads a filtered policy from file/database.
            </summary>
            <param name="enforcer"></param>
            <param name="filter">The filter used to specify which type of policy should be loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Casbin.EnforcerExtension.SavePolicy(Casbin.IEnforcer)">
            <summary>
            Saves the current policy (usually after changed with Casbin API)
            back to file/database.
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.SavePolicyAsync(Casbin.IEnforcer)">
            <summary>
            Saves the current policy (usually after changed with Casbin API)
            back to file/database.
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.ClearPolicy(Casbin.IEnforcer)">
            <summary>
            Clears all policy.
            </summary>
        </member>
        <member name="M:Casbin.EnforcerExtension.BuildRoleLinks(Casbin.IEnforcer)">
            <summary>
            Manually rebuilds the role inheritance relations.
            </summary>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalAddPolicy(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
            Adds a values to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalAddPolicyAsync(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
            Adds a values to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalAddPolicies(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
            Adds valuesList to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="valuesList"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalAddPoliciesAsync(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
            Adds valuesList to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="valuesList"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalUpdatePolicy(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues,Casbin.Model.IPolicyValues)">
            <summary>
                Updates a values from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="oldValues"></param>
            <param name="newValues"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalUpdatePolicyAsync(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues,Casbin.Model.IPolicyValues)">
            <summary>
            Updates a values from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="oldValues"></param>
            <param name="newValues"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalUpdatePolicies(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues},System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                Updates valuesList from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="oldValuesList"></param>
            <param name="newValuesList"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalUpdatePoliciesAsync(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues},System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
                Updates valuesList from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="oldValuesList"></param>
            <param name="newValuesList"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemovePolicy(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
            Removes a values from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemovePolicyAsync(Casbin.IEnforcer,System.String,System.String,Casbin.Model.IPolicyValues)">
            <summary>
            Removes a values from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemovePolicies(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
            Removes valuesList from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemovePoliciesAsync(Casbin.IEnforcer,System.String,System.String,System.Collections.Generic.IReadOnlyList{Casbin.Model.IPolicyValues})">
            <summary>
            Removes valuesList from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemoveFilteredPolicy(Casbin.IEnforcer,System.String,System.String,System.Int32,Casbin.Model.IPolicyValues)">
            <summary>
            Removes valuesList based on field filters from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="fieldIndex"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.InternalEnforcerExtension.InternalRemoveFilteredPolicyAsync(Casbin.IEnforcer,System.String,System.String,System.Int32,Casbin.Model.IPolicyValues)">
            <summary>
            Removes valuesList based on field filters from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="section"></param>
            <param name="policyType"></param>
            <param name="fieldIndex"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddFunction(Casbin.IEnforcer,System.String,System.Delegate)">
            <summary>
                Adds a customized function.
            </summary>
            <param name="enforcer"></param>
            <param name="name">The name of the new function.</param>
            <param name="function">The function.</param>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddFunction(Casbin.IEnforcer,System.String,System.Func{System.String,System.String,System.Boolean})">
            <summary>
                Adds a customized function.
            </summary>
            <param name="enforcer"></param>
            <param name="name">The name of the new function.</param>
            <param name="function">The function.</param>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllSubjects(Casbin.IEnforcer)">
            <summary>
            Gets the list of subjects that show up in the current policy.
            </summary>
            <param name="enforcer"></param>
            <returns>
            All the subjects in "p" policy rules. It actually collects the
            0-index elements of "p" policy rules. So make sure your subject
            is the 0-index element, like (sub, obj, act). Duplicates are removed.
            </returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllNamedSubjects(Casbin.IEnforcer,System.String)">
            <summary>
            GetAllNamedSubjects gets the list of subjects that show up in the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <returns>
            All the subjects in policy rules of the policyType type. It actually
            collects the 0-index elements of the policy rules.So make sure
            your subject is the 0-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllObjects(Casbin.IEnforcer)">
            <summary>
            Gets the list of objects that show up in the current policy.
            </summary>
            <param name="enforcer"></param>
            <returns>
            All the objects in "p" policy rules. It actually collects the
            1-index elements of "p" policy rules.So make sure your object
            is the 1-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllNamedObjects(Casbin.IEnforcer,System.String)">
            <summary>
            Gets the list of objects that show up in the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <returns>
            All the objects in policy rules of the policyType type. It actually
            collects the 1-index elements of the policy rules.So make sure
            your object is the 1-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllActions(Casbin.IEnforcer)">
            <summary>
            Gets the list of actions that show up in the current policy.
            </summary>
            <returns>
            All the actions in "p" policy rules. It actually collects
            the 2-index elements of "p" policy rules.So make sure your action
            is the 2-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllNamedActions(Casbin.IEnforcer,System.String)">
            <summary>
            Gets the list of actions that show up in the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <returns>
            All the actions in policy rules of the policyType type. It actually
            collects the 2-index elements of the policy rules.So make sure
            your action is the 2-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetPolicy(Casbin.IEnforcer)">
            <summary>
            Gets all the authorization rules in the policy.
            </summary>
            <returns> all the "p" policy rules.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetNamedPolicy(Casbin.IEnforcer,System.String)">
            <summary>
            Gets all the authorization rules in the named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <returns>The "p" policy rules of the specified policyType.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetFilteredPolicy(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Gets all the authorization rules in the policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to  match this field.</param>
            <returns>The filtered "p" policy rules.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetFilteredNamedPolicy(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Gets all the authorization rules in the named policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to  match this field.</param>
            <returns>The filtered "p" policy rules of the specified policyType.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether an authorization rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="paramList">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasPolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Determines whether an authorization rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasNamedPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a named authorization rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="paramList">The "p" policy rule.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasNamedPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Determines whether a named authorization rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds an authorization rule to the current policy. If the rule
                already exists, the function returns false and the rule will not be added.
                Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="values">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Adds an authorization rule to the current policy. If the rule
            already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="values">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPolicyAsync(Casbin.IEnforcer,System.String[])">
            <summary>
            Adds an authorization rule to the current policy. If the rule
            already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds an authorization rule to the current policy. If the rule
            already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds an authorization rule to the current named policy.If the
            rule already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="values">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
                Adds an authorization rule to the current named policy.If the
                rule already exists, the function returns false and the rule will not be added.
                Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="values">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPolicyAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
                Adds an authorization rule to the current named policy.If the
                rule already exists, the function returns false and the rule will not be added.
                Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds an authorization rule to the current named policy.If the
            rule already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds authorization rules to the current policy. If the rule
            already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddPoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds authorization rules to the current policy. If the rule
            already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds authorization rules to the current named policy.If the
            rule already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="rules">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds authorization rules to the current named policy.If the
            rule already exists, the function returns false and the rule will not be added.
            Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="rules">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "p" policy rule to be replaced, policyType "p" is implicitly used.</param>
            <param name="newParameters">The "p" policy rule to replace the old one, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "p" policy rule to be replaced, policyType "p" is implicitly used.</param>
            <param name="newParameters">The "p" policy rule to replace the old one, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "p" policy rule to be replaced, policyType "p" is implicitly used.</param>
            <param name="newParameters">The "p" policy rule to replace the old one, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "p" policy rule to be replaced, policyType "p" is implicitly used.</param>
            <param name="newParameters">The "p" policy rule to replace the old one, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldParameters">The "p" policy rule to be replaced.</param>
            <param name="newParameters">The "p" policy rule to replace the old one.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates an authorization rule to the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldParameters">The "p" policy rule to be replaced.</param>
            <param name="newParameters">The "p" policy rule to replace the old one.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an authorization rule to the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldParameters">The "p" policy rule to be replaced.</param>
            <param name="newParameters">The "p" policy rule to replace the old one.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an authorization rule to the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldParameters">The "p" policy rule to be replaced.</param>
            <param name="newParameters">The "p" policy rule to replace the old one.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates authorization rules to the current policies.
            </summary>
            <param name="enforcer"></param>
            <param name="oldRules">The "p" policy rules to be replaced, policyType "p" is implicitly used.</param>
            <param name="newRules">The "p" policy rules to replace the old ones, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdatePoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates authorization rules to the current policies.
            </summary>
            <param name="enforcer"></param>
            <param name="oldRules">The "p" policy rules to be replaced, policyType "p" is implicitly used.</param>
            <param name="newRules">The "p" policy rules to replace the old ones, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates authorization rules to the current named policies.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldRules">The "p" policy rule to be replaced.</param>
            <param name="newRules">The "p" policy rule to replace the old ones.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates authorization rules to the current named policies.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="oldRules">The "p" policy rule to be replaced.</param>
            <param name="newRules">The "p" policy rule to replace the old ones.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an authorization rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an authorization rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Removes an authorization rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePolicyAsync(Casbin.IEnforcer,System.String[])">
            <summary>
            Removes an authorization rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Removes an authorization rule from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPolicyAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Removes an authorization rule from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an authorization rule from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes an authorization rule from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="parameters">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes authorization rules from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemovePoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes authorization rules from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "p" policy rule, policyType "p" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes authorization rules from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="rules">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes authorization rules from the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="rules">The "p" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredPolicy(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Removes an authorization rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredPolicyAsync(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Removes an authorization rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredNamedPolicy(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Removes an authorization rule from the current named policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to  match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredNamedPolicyAsync(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Removes an authorization rule from the current named policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "p", "p2", "p3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to  match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllRoles(Casbin.IEnforcer)">
            <summary>
            Gets the list of roles that show up in the current policy.
            </summary>
            <param name="enforcer"></param>
            <returns>
            All the roles in "g" policy rules. It actually collects
            the 1-index elements of "g" policy rules. So make sure your
            role is the 1-index element, like (sub, role).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetAllNamedRoles(Casbin.IEnforcer,System.String)">
            <summary>
            Gets the list of roles that show up in the current named policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <returns>
            All the subjects in policy rules of the policyType type. It actually
            collects the 0-index elements of the policy rules.So make
            Sure your subject is the 0-index element, like (sub, obj, act).
            Duplicates are removed.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasGroupingPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a role inheritance rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasGroupingPolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Determines whether a role inheritance rule exists.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a named role inheritance rule
            exists.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.HasNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Determines whether a named role inheritance rule
            exists.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule.</param>
            <returns>Whether the rule exists.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetGroupingPolicy(Casbin.IEnforcer)">
            <summary>
            Gets all the role inheritance rules in the policy.
            </summary>
            <returns>all the "g" policy rules.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetFilteredGroupingPolicy(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Gets all the role inheritance rules in the policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>The filtered "g" policy rules.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetNamedGroupingPolicy(Casbin.IEnforcer,System.String)">
            <summary>
            Gets all the role inheritance rules in the policy.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <returns>The "g" policy rules of the specified policyType.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.GetFilteredNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Gets all the role inheritance rules in the policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>The filtered "g" policy rules of the specified policyType.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a role inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a role inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Adds a role inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPolicyAsync(Casbin.IEnforcer,System.String[])">
            <summary>
            Adds a role inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a named role inheritance rule to the current
            policy. If the rule already exists, the function returns false and the rule
            will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="values">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Adds a named role inheritance rule to the current
            policy. If the rule already exists, the function returns false and the rule
            will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="values">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a named role inheritance rule to the current
                policy. If the rule already exists, the function returns false and the rule
                will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Adds a named role inheritance rule to the current
            policy. If the rule already exists, the function returns false and the rule
            will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds roles inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddGroupingPoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds roles inheritance rule to the current policy. If the
            rule already exists, the function returns false and the rule will not be
            Added.Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds named roles inheritance rule to the current
            policy. If the rule already exists, the function returns false and the rule
            will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="rules">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.AddNamedGroupingPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Adds named roles inheritance rule to the current
            policy. If the rule already exists, the function returns false and the rule
            will not be added. Otherwise the function returns true by adding the new rule.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="rules">The "g" policy rule.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldParameters">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newParameters">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldRules">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newRules">The "g" policy rule to replace the old ones, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateGroupingPoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="oldRules">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newRules">The "g" policy rule to replace the old one, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldRules">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newRules">The "g" policy rule to replace the old ones, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.UpdateNamedGroupingPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
                Updates a role inheritance rule from the current policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="oldRules">The "g" policy rule to be replaced, policyType "g" is implicitly used.</param>
            <param name="newRules">The "g" policy rule to replace the old ones, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPolicy(Casbin.IEnforcer,System.String[])">
            <summary>
            Removes a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPolicyAsync(Casbin.IEnforcer,System.String[])">
            <summary>
            Removes a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPolicy(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPolicyAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a role inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="parameters">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPolicies(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes roles inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveGroupingPoliciesAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes roles inheritance rule from the current policy.
            </summary>
            <param name="enforcer"></param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPolicies(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes roles inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveNamedGroupingPoliciesAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Removes roles inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="rules">The "g" policy rule, policyType "g" is implicitly used.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredGroupingPolicy(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredGroupingPolicyAsync(Casbin.IEnforcer,System.Int32,System.String[])">
            <summary>
            Removes a role inheritance rule from the current
            policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredNamedGroupingPolicy(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Removes a role inheritance rule from the current named policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.ManagementEnforcerExtension.RemoveFilteredNamedGroupingPolicyAsync(Casbin.IEnforcer,System.String,System.Int32,System.String[])">
            <summary>
            Removes a role inheritance rule from the current named policy, field filters can be specified.
            </summary>
            <param name="enforcer"></param>
            <param name="policyType">The policy type, can be "g", "g2", "g3", ..</param>
            <param name="fieldIndex">The policy rule's start index to be matched.</param>
            <param name="fieldValues">The field values to be matched, value "" means not to match this field.</param>
            <returns>Succeeds or not.</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.HasRoleForUser(Casbin.IEnforcer,System.String,System.String,System.String)">
            <summary>
                Determines whether a user has a role.
            </summary>
            <param name="enforcer"></param>
            <param name="name"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetPermissionsForUser(Casbin.IEnforcer,System.String,System.String)">
            <summary>
                Gets permissions for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetRolesForUser(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            Gets the roles that a user has.
            </summary>
            <param name="enforcer"></param>
            <param name="name"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetUsersForRole(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            Gets the users that has a role.
            </summary>
            <param name="enforcer"></param>
            <param name="name"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetUsersForRoles(Casbin.IEnforcer,System.String[])">
            <summary>
            Gets the users that has roles.
            </summary>
            <param name="enforcer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetUsersForRoles(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the users that has roles.
            </summary>
            <param name="enforcer"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRoleForUser(Casbin.IEnforcer,System.String,System.String,System.String)">
            <summary>
            Adds a role for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the user already has the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRoleForUserAsync(Casbin.IEnforcer,System.String,System.String,System.String)">
            <summary>
            Adds a role for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the user already has the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRolesForUser(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            AddRolesForUser adds roles for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the user already has the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRolesForUserAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            AddRolesForUser adds roles for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the user already has the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRoleForUser(Casbin.IEnforcer,System.String,System.String,System.String)">
            <summary>
            Deletes a role for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the user does not have the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRoleForUserAsync(Casbin.IEnforcer,System.String,System.String,System.String)">
            <summary>
            Deletes a role for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="role"></param>
            <param name="domain"></param>
            <returns>Returns false if the us/*does */not have the role (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRolesForUser(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            Deletes all roles for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="domain"></param>
            <returns>Returns false if the user does not have any roles (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRolesForUserAsync(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            Deletes all roles for a user.
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="domain"></param>
            <returns>Returns false if the user does not have any roles (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteUser(Casbin.IEnforcer,System.String)">
            <summary>
            Deletes a user
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <returns>Returns false if the user does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteUserAsync(Casbin.IEnforcer,System.String)">
            <summary>
            Deletes a user
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <returns>Returns false if the user does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRole(Casbin.IEnforcer,System.String)">
            <summary>
            Deletes a role.
            </summary>
            <param name="enforcer"></param>
            <param name="role"></param>
            <returns>Returns false if the role does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRoleAsync(Casbin.IEnforcer,System.String)">
            <summary>
            Deletes a role.
            </summary>
            <param name="enforcer"></param>
            <param name="role"></param>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.HasPermissionForUser(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Determines whether a user has a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.HasPermissionForUser(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a user has a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddPermissionForUser(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Adds a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns> Returns false if the user or role already has the permission (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddPermissionForUserAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            Adds a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns> Returns false if the user or role already has the permission (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddPermissionForUser(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns>Returns false if the user or role already has the permission (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddPermissionForUserAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds multiple permissions for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns>Returns false if the user or role already has the permission (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermission(Casbin.IEnforcer,System.String[])">
            <summary>
            DeletePermission deletes a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="permission"></param>
            <returns>Returns false if the permission does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionAsync(Casbin.IEnforcer,System.String[])">
            <summary>
            DeletePermission deletes a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="permission"></param>
            <returns>Returns false if the permission does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermission(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DeletePermission deletes a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="permission"></param>
            <returns>Returns false if the permission does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionAsync(Casbin.IEnforcer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DeletePermission deletes a permission.
            </summary>
            <param name="enforcer"></param>
            <param name="permission"></param>
            <returns>Returns false if the permission does not exist (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionForUser(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            DeletePermissionForUser deletes a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionForUserAsync(Casbin.IEnforcer,System.String,System.String[])">
            <summary>
            DeletePermissionForUser deletes a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionForUser(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DeletePermissionForUser deletes a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns>Returns false if the user or role does not have any permissions (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionForUserAsync(Casbin.IEnforcer,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            DeletePermissionForUser deletes a permission for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <param name="permission"></param>
            <returns>Returns false if the user or role does not have any permissions (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionsForUser(Casbin.IEnforcer,System.String)">
            <summary>
            DeletePermissionsForUser deletes permissions for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <returns>Returns false if the user or role does not have any permissions (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeletePermissionsForUserAsync(Casbin.IEnforcer,System.String)">
            <summary>
            DeletePermissionsForUser deletes permissions for a user or role.
            </summary>
            <param name="enforcer"></param>
            <param name="user">User or role</param>
            <returns>Returns false if the user or role does not have any permissions (aka not affected).</returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetImplicitRolesForUser(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            Gets implicit roles that a user has.
            Compared to GetRolesForUser(), this function retrieves indirect roles besides direct roles.
            </summary>
            <param name="enforcer"></param>
            <param name="name"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetImplicitPermissionsForUser(Casbin.IEnforcer,System.String,System.String)">
            <summary>
            <para>Gets implicit permissions for a user or role.</para>
            <para>Compared to GetPermissionsForUser(), this function retrieves permissions for inherited roles.</para>
            <para>For example:</para>
            <para>p, admin, data1, read</para>
            <para>p, alice, data2, read</para>
            <para>g, alice, admin </para>
            <para>GetPermissionsForUser("alice") can only get: [["alice", "data2", "read"]].</para>
            <para>But GetImplicitPermissionsForUser("alice") will get: [["admin", "data1", "read"], ["alice", "data2", "read"]].</para>
            </summary>
            <param name="enforcer"></param>
            <param name="user"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetRolesForUserInDomain(Casbin.IEnforcer,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="name"></param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.GetPermissionsForUserInDomain(Casbin.IEnforcer,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="user">User or role</param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRoleForUserInDomain(Casbin.IEnforcer,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="user"></param>
             <param name="role"></param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.AddRoleForUserInDomainAsync(Casbin.IEnforcer,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="user"></param>
             <param name="role"></param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRoleForUserInDomain(Casbin.IEnforcer,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="user"></param>
             <param name="role"></param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.RbacEnforcerExtension.DeleteRoleForUserInDomainAsync(Casbin.IEnforcer,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="enforcer"></param>
             <param name="user"></param>
             <param name="role"></param>
             <param name="domain"></param>
             <returns></returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyGet(System.String,System.String)">
            <summary>
            KeyGet returns the matched part
            For example, "/foo/bar/foo" matches "/foo/*"
            "bar/foo" will been returned
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyGet2(System.String,System.String,System.String)">
            <summary>
            KeyGet2 returns value matched pattern
            For example, "/resource1" matches "/:resource"
            if the pathVar == "resource", then "resource1" will be returned
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            /// <param name="pathVar">The path variable.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyGet3(System.String,System.String,System.String)">
            <summary>
            KeyGet3 returns value matched pattern
            For example, "project/proj_project1_admin/" matches "project/proj_{project}_admin/"
            if the pathVar == "project", then "project1" will be returned
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            /// <param name="pathVar">The path variable.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyMatch(System.String,System.String)">
            <summary>
            Determines whether key1 matches the pattern of key2 (similar to RESTful path),
            key2 can contain a *. For example, "/foo/bar" matches "/foo/*".
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyMatch2(System.String,System.String)">
            <summary>
            Determines whether key1 matches the pattern of key2 (similar to
            RESTful path), key2 can contain a*. For example, "/foo/bar" matches
            "/foo/*", "/resource1" matches "/:resource"
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyMatch3(System.String,System.String)">
            <summary>
            Determines whether key1 matches the pattern of key2 (similar to
            RESTful path), key2 can contain a *. For example, "/foo/bar" matches
             "/foo/*", "/resource1" matches "/{resource}"
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyMatch4(System.String,System.String)">
            <summary>
            Determines whether key1 matches the pattern of key2 (similar to RESTful path), key2 can contain a *.
            Besides what KeyMatch3 does, KeyMatch4 can also match repeated patterns:
            "/parent/123/child/123" matches "/parent/{id}/child/{id}"
            "/parent/123/child/456" does not match "/parent/{id}/child/{id}"
            But KeyMatch3 will match both.
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.KeyMatch5(System.String,System.String)">
            <summary>
            KeyMatch determines whether key1 matches the pattern of key2 and ignores the parameters in key2.
            For example, "/foo/bar?status=1&amp;type=2" matches "/foo/bar"
            </summary>
            <param name="key1"> The first argument. </param>
            <param name="key2"> The second argument. </param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.IPMatch(System.String,System.String)">
            <summary>
            Determines whether IP address ip1 matches the pattern of IP address ip2,
            ip2 can be an IP address or a CIDR pattern. For example, "192.168.2.123"
            matches "192.168.2.0/24"
            </summary>
            <param name="ip1">The first argument.</param>
            <param name="ip2">The second argument.</param>
            <returns>Whether ip1 matches ip2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.RegexMatch(System.String,System.String)">
            <summary>
            Determines whether key1 matches the pattern of key2 in regular
            expression.
            </summary>
            <param name="key1">The first argument.</param>
            <param name="key2">The second argument.</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.GlobMatch(System.String,System.String)">
            <summary>
            Determines whether key1 matches the globbing pattern of key2
            </summary>
            <param name="key1">The keyword to match</param>
            <param name="key2">The Globbing pattern</param>
            <returns>Whether key1 matches key2.</returns>
        </member>
        <member name="M:Casbin.Functions.BuiltInFunctions.GenerateGFunction(Casbin.Rbac.IRoleManager,Casbin.Caching.IGFunctionCache)">
            <summary>
            GenerateGFunction is the factory method of the g(_, _) function.
            </summary>
            <param name="roleManager">The role manager used by the function.</param>
            <param name="cache">Result cache</param>
            <returns>The function.</returns>
        </member>
        <member name="M:Casbin.Util.StringUtil.RemoveComments(System.String)">
            <summary>
            Removes the comments starting with # in the text.
            </summary>
            <param name="line">a line in the model.</param>
            <returns>The line without comments.</returns>
        </member>
        <member name="M:Casbin.Util.StringUtil.HasEval(System.String)">
            <summary>
            Determines whether matcher contains eval function
            </summary>
            <param name="expressString"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Util.StringUtil.TryGetEvalRuleNames(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries get rule names of eval function
            </summary>
            <param name="expressString"></param>
            <param name="evalRuleNames"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Util.StringUtil.ReplaceEval(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Replace eval function with the value of its eval rule
            </summary>
            <param name="expressStringWithEvalRule"></param>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Util.StringUtil.ReplaceInOperator(System.String)">
            <summary>
            Replace in operator with function "Contains".
            </summary>
            <param name="expressString"></param>
            <returns></returns>
        </member>
        <member name="M:Casbin.Util.Utility.SetEquals(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            SetEquals determines whether two string sets are identical.
            </summary>
            <param name="a">The first set.</param>
            <param name="b">The second set.</param>
            <returns>Whether a equals to b.</returns>
        </member>
    </members>
</doc>
